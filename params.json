{"name":"Source-code-analyzer","tagline":"This tool is a static analyzer that parses a C/C++ files and extracts out code related metrics","body":"# Source Code Analyzer\r\n\r\nOverview\r\n--------------------------------------------------------------------------------------------------\r\nSource Code Analyzer (SCA) is a static C/C++ code analyzer that can be used to identify the areas of the code that violate the coding guidelines set by the dev team. \r\nThis tool can be runas a post checkin tool, that can identify any violations caused by the recent checkin. This tool can also be run on a \r\nnightly basis to track the overall complexity and mantainibility of the code base. \r\n\r\nSCA collects below information about the code\r\n\r\n- Cyclomatic complexity of a function/method\r\n- Time complexity of a function/method\r\n- Number of lines in a function/method\r\n- Number of argument to a function\r\n- Maximum nesting present in a function\r\n- Number of TODO, FIXME comments in the code base\r\n- Comment density of source files\r\n\r\nThis tool uses CLANG (libclang) which is a front-end to LLVM compiler. This is a beta code and you may face issues. Please report it to me and would love to fix them for you. \r\n\r\nHow to run SCA\r\n-----------------------------------------------------------------------------------------------------------\r\nIt's very simple!! You can use SCA like other compiler (ex gcc/g++,clang). All it takes is to replace your compiler with SCA in your build system. SCA supports most of the gcc/g++ options and hence there won't be any modifications needed in most of the cases. If you specify -o option it dumps the output in the file specified, if not it'll \r\ndump the output on stdout. Lets take an example (foo.cc) and try to get some data out of this file\r\n\r\nfoo.cc\r\n\r\n````\r\nint main(int argc, char **argv) {\r\n  int x, y;\r\n  for(int x=0; x<10; x++) {\r\n    if(x > 5) {\r\n      for(y=0; y<20; y++) {\r\n        if(y > 10) {\r\n          //Do something here\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n  ````\r\n  To get the data out of this file foo.cc, we use SCA tool like below we use below command\r\n  ````\r\n  $ sca foo.cc\r\n  ````\r\n  Output\r\n------------------------------------------------------------------------------------------------------------------------------------\r\n  The output of SCA is a JSON file that would list the calculated data for each package, functions, methods and class found in the \r\n  source file. For the above foo.cc, the output is as below\r\n  ````\r\n  \r\n  {\r\n  \"pkg\" : [\r\n    {\r\n       \"ssca_PkgName\" : \"/tools/sca/src\",\r\n       \"ssca_sFile\" : [\r\n          {\r\n            \"ssca_FileName\": \"foo.cc\",\r\n            \"ssca_funct\" : [\r\n              {\r\n                \"ssca_FunctionName\": \"main\",\r\n                \"ssca_i\"   : \"foo.cc:18\",\r\n                \"ssca_cyc\" : 5,\r\n                \"ssca_cmp\" : 2,\r\n                \"ssca_mn\"  : 4,\r\n                \"ssca_nl\"  : 12,\r\n                \"ssca_ps\"  : 2\r\n              }\r\n                       ],\r\n            \"ssca_cls\" : [\r\n                    ]\r\n          }\r\n               ],\r\n       \"ssca_hFile\" : [\r\n               ]\r\n    }\r\n            ]\r\n}\r\n````\r\nBelow table indicates the meaning of each tags in the above JSON file\r\n\r\n- pkg: An array of all the directories and subdirectories that constitue a product.\r\n- ssca_PkgName    : The name of one directory inside the product\r\n- ssca_sFile      : An array of the source files present inside the package \"ssca_PkgName\"\r\n- ssca_sHile      : An array of the header files present inside the package \"ssca_PkgName\"\r\n- ssca_FileName   : Name of the source/header file\r\n- ssca_funct      : An aray of all the functions defined inside \"ssca_FileName\"\r\n- ssca_FunctionName : Name of the function\r\n- ssca_i          : The id of the function <source_file>:line_num\r\n- ssca_cyc        : Cyclomatic complexity of the function\r\n- ssca_cmp        : Time complexity of the function\r\n- ssca_mn         : Max nesting of the function\r\n- ssca_nl         : Number of lines in a function\r\n- ssca_ps         : Number of input parameters to the function\r\n","google":"UA-65099287-1","note":"Don't delete this file! It's used internally to help with page regeneration."}